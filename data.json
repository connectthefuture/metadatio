{
    "project": {
        "name": "Metadatio",
        "description": "Use metadata to build things",
        "logo": "../graphic/logo_400.png",
        "version": "0.7.54",
        "url": "http://metadat.io/"
    },
    "files": {
        "src/actions/entity.actions.js": {
            "name": "src/actions/entity.actions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/actions/field.actions.js": {
            "name": "src/actions/field.actions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/actions/index.js": {
            "name": "src/actions/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/actions/metadatio.actions.js": {
            "name": "src/actions/metadatio.actions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/actions/validator.actions.js": {
            "name": "src/actions/validator.actions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/exceptions/data-validation.exception.js": {
            "name": "src/exceptions/data-validation.exception.js",
            "modules": {
                "exceptions": 1
            },
            "classes": {
                "DataValidationException": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/exceptions/index.js": {
            "name": "src/exceptions/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/exceptions/metadata-integrity.exception.js": {
            "name": "src/exceptions/metadata-integrity.exception.js",
            "modules": {},
            "classes": {
                "MetadataIntegrityException": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/exceptions/reducer.exception.js": {
            "name": "src/exceptions/reducer.exception.js",
            "modules": {},
            "classes": {
                "ReducerException": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/exceptions/store.exception.js": {
            "name": "src/exceptions/store.exception.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/exceptions/validator.exception.js": {
            "name": "src/exceptions/validator.exception.js",
            "modules": {},
            "classes": {
                "ValidatorException": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/data-types.metadata.js": {
            "name": "src/metadata/data-types.metadata.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/element.metadata.js": {
            "name": "src/metadata/element.metadata.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/entity.metadata.js": {
            "name": "src/metadata/entity.metadata.js",
            "modules": {},
            "classes": {
                "Entity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/field-types.metadata.js": {
            "name": "src/metadata/field-types.metadata.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/field.metadata.js": {
            "name": "src/metadata/field.metadata.js",
            "modules": {},
            "classes": {
                "Field": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/index.js": {
            "name": "src/metadata/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/metadatio.js": {
            "name": "src/metadata/metadatio.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/util.metadata.js": {
            "name": "src/metadata/util.metadata.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/validator-types.metadata.js": {
            "name": "src/metadata/validator-types.metadata.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/metadata/validator.metadata.js": {
            "name": "src/metadata/validator.metadata.js",
            "modules": {},
            "classes": {
                "Validator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/reducers/injectable/entity.reducer.js": {
            "name": "src/reducers/injectable/entity.reducer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reducers/injectable/field.reducer.js": {
            "name": "src/reducers/injectable/field.reducer.js",
            "modules": {
                "injectable": 1
            },
            "classes": {
                "FieldReducer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/reducers/injectable/index.js": {
            "name": "src/reducers/injectable/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reducers/injectable/injectable.reducer.js": {
            "name": "src/reducers/injectable/injectable.reducer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reducers/injectable/raw-map.reducer.js": {
            "name": "src/reducers/injectable/raw-map.reducer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reducers/injectable/validator.reducer.js": {
            "name": "src/reducers/injectable/validator.reducer.js",
            "modules": {},
            "classes": {
                "ValidatorReducer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/reducers/index.js": {
            "name": "src/reducers/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reducers/metadatio.reducer.js": {
            "name": "src/reducers/metadatio.reducer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/index.js": {
            "name": "src/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/store.js": {
            "name": "src/store.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "Store": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Core": {
            "name": "Core",
            "submodules": {
                "exceptions": 1
            },
            "elements": {},
            "classes": {
                "DataValidationException": 1,
                "MetadataIntegrityException": 1,
                "ReducerException": 1,
                "ValidatorException": 1,
                "Entity": 1,
                "Field": 1,
                "Validator": 1,
                "Store": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/store.js",
            "line": 12,
            "description": "Metadatio store.",
            "is_constructor": 1
        },
        "exceptions": {
            "name": "exceptions",
            "submodules": {},
            "elements": {},
            "classes": {
                "DataValidationException": 1,
                "MetadataIntegrityException": 1,
                "ReducerException": 1,
                "ValidatorException": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Core",
            "namespace": "",
            "file": "src/exceptions/validator.exception.js",
            "line": 5,
            "description": "This exception is thrown whenever there is an error while validating your data.",
            "extends": "Error",
            "is_constructor": 1
        },
        "Reducers": {
            "name": "Reducers",
            "submodules": {
                "injectable": 1
            },
            "elements": {},
            "classes": {
                "FieldReducer": 1,
                "ValidatorReducer": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "src/reducers/injectable/validator.reducer.js",
            "line": 12
        },
        "injectable": {
            "name": "injectable",
            "submodules": {},
            "elements": {},
            "classes": {
                "FieldReducer": 1,
                "ValidatorReducer": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Reducers",
            "namespace": "",
            "file": "src/reducers/injectable/validator.reducer.js",
            "line": 12,
            "description": "This reducer is in charge of controlling all actions dispatched to change the validation status for a field.",
            "extends": "InjectableReducer",
            "is_constructor": 1
        }
    },
    "classes": {
        "DataValidationException": {
            "name": "DataValidationException",
            "shortname": "DataValidationException",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "submodule": "exceptions",
            "namespace": "",
            "file": "src/exceptions/data-validation.exception.js",
            "line": 5,
            "description": "This exception is thrown whenever there is an error while validating your data."
        },
        "MetadataIntegrityException": {
            "name": "MetadataIntegrityException",
            "shortname": "MetadataIntegrityException",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "submodule": "exceptions",
            "namespace": "",
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 5,
            "description": "When you instance Metadatio entities and fields, some data health checks are performed. If in the data you declared to configure your element is corrupt in any way, this exception will be thrown."
        },
        "ReducerException": {
            "name": "ReducerException",
            "shortname": "ReducerException",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "submodule": "exceptions",
            "namespace": "",
            "file": "src/exceptions/reducer.exception.js",
            "line": 5,
            "description": "Defines an exception thrown within the Reducer system. Whenever some reduction process fails, you will get this exception. There are several reasons for which you could get a `ReducerException`."
        },
        "ValidatorException": {
            "name": "ValidatorException",
            "shortname": "ValidatorException",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "submodule": "exceptions",
            "namespace": "",
            "file": "src/exceptions/validator.exception.js",
            "line": 5
        },
        "Entity": {
            "name": "Entity",
            "shortname": "Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src/metadata/entity.metadata.js",
            "line": 11,
            "description": "Entities represent real-world elements, that you need to manage within your app.\nExample entities are _Person_, _Car_, and whatever else you can imagine.\n\nEntities by itself don't contain any particular feature - apart from identification, and grouping -. Whilst some Metadatio modules will extend this objects to enrich its features, at it's core an Entity is basically a container for fields.\n\n## Usage\n\n```\nconst entity = new Entity({\n  name: 'Friend',\n  [label: 'Friend',]\n  [namespace: 'people',]\n  [description: 'description...',]\n  [fields: [...]]\n});\n```\n\n## Entity hierarchy\n\nYou can easily define hierarchy between your entities, by leveraging the {{#crossLink \"Entity/parent:property\"}}parent{{/crossLink}} property.\n\n```\nconst parent = new Entity({ name: 'parent-entity', ... });\nconst child = new Entity({ name: 'child-entity', parent: parent });\n```\n\n## Namespaces\n\nEntities are grouped together via `namespaces`, that shall contain entities dedicated to the same purpose, or that are related among each others.\n\nThe `namespace` is a String set directly to the entity upon creation. If you don't set a namespace, the value `'default'` is used. So if you're only planning to use one namespace you can skip this.\n\n\n## Fields\n\nFields are instances of {{#crossLink \"Field\"}}Field{{/crossLink}}, that you can attach upon entity creation, or at any time, by using the built-in {{#crossLink \"Entity/addField:method\"}}addField{{/crossLink}} method.\n\n## Validation\n\nEntities are provided with a native validation system, to determine whether the values set within an object that should comply with entity specification are valid. Basically, entity validation targets the value for each {{#crossLink \"Field\"}}field{{/crossLink}} within the entity, and launches the {{#crossLink \"Field/validate:method\"}}field's validation system{{/crossLink}}."
        },
        "Field": {
            "name": "Field",
            "shortname": "Field",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src/metadata/field.metadata.js",
            "line": 10,
            "description": "The fields represent each and every property of any entity. Each field is completely sufficient - it stores configuration about the identification, typing and validation of the property - and all {{#crossLink \"Entity\"}}entity{{/crossLink}} procedures depending on fields dispatch down the action, that it's interpreted isolatedly.\n\n## Usage\n\n```\nconst field = new Field({\n  name: 'foo',\n  [label: 'Foo',]\n  [description: 'description...',]\n  dataType: 'string',\n  [multiplicity: 'one',]\n  [validators: {...}]\n});\n```\n\n## Identification\n\nAll fields must be defined with a {{#crossLink \"Field/name:property\"}}name{{/crossLink}}, that must be unique within each entity. In addition, you can define a field's {{#crossLink \"Field/label:property\"}}label{{/crossLink}} - useful for translatable usages.\n\n## Data typing\n\nAll fields must have an assigned data type.\n\n### Basic data types\n\nYou can make use of several basic data types, all available at the {{#crossLink \"DataTypes\"}}DataTypes{{/crossLink}} specification.\n\n```\nstring: 'Sample value',\nnumber: 123[.456],\nboolean: true|false,\ndate: new Date()|Timestamp\n```\n\n### Reference data types\n\nYou can set a reference to an entity as the data type for a field. This will build a relationship between your field's entity and the target entity, through the field you setup for that.\n\n```\nconst foo = new Entity({ name: 'foo', ... });\nconst field = new Field({ name: 'bar', dataType: foo });\n```\n\n#### Referenced validations\n\nWhen a field's data type is set as a reference, the validation procedures change for it. Values for the fields with this metadata can be filled either with the whole entity - for inner object saving - or via a `string` or `number` identifying the entity - deep linking approach. In the case you provide complete entities as values, the validation procedures of the target entity's metadata will be applied."
        },
        "Validator": {
            "name": "Validator",
            "shortname": "Validator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src/metadata/validator.metadata.js",
            "line": 10,
            "description": "Validators help you define rules with which you will consider the value given for a field as **valid**."
        },
        "FieldReducer": {
            "name": "FieldReducer",
            "shortname": "FieldReducer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Reducers",
            "submodule": "injectable",
            "namespace": "",
            "file": "src/reducers/injectable/field.reducer.js",
            "line": 14,
            "description": "This reducer is in charge of controlling all actions dispatched to change the validation status for a field."
        },
        "ValidatorReducer": {
            "name": "ValidatorReducer",
            "shortname": "ValidatorReducer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Reducers",
            "submodule": "injectable",
            "namespace": "",
            "file": "src/reducers/injectable/validator.reducer.js",
            "line": 12,
            "description": "This reducer is in charge of controlling all actions dispatched to change the validation status for a field."
        },
        "Store": {
            "name": "Store",
            "shortname": "Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src/store.js",
            "line": 12,
            "description": "Metadatio store."
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/actions/entity.actions.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "DataValidationException"
        },
        {
            "file": "src/actions/field.actions.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "DataValidationException"
        },
        {
            "file": "src/actions/index.js",
            "line": 1,
            "description": "Created by sm on 17/05/16.",
            "class": "DataValidationException"
        },
        {
            "file": "src/actions/metadatio.actions.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "DataValidationException"
        },
        {
            "file": "src/actions/validator.actions.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "DataValidationException"
        },
        {
            "file": "src/exceptions/data-validation.exception.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "DataValidationException"
        },
        {
            "file": "src/exceptions/index.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "MetadataIntegrityException",
            "module": "Core"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "MetadataIntegrityException",
            "module": "Core"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 21,
            "description": "### Entity name is required.\n\nThis error is thrown when you try to create an entity, and the description object you used does not contain a `name` param.",
            "example": [
                "\n    new Entity({});"
            ],
            "itemtype": "attribute",
            "name": "MIE001",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 32,
            "description": "### Entity name must be a String.\n\nThrown when you try to set a non-string value as entity name.",
            "example": [
                "\n    new Entity({ name: 123 });"
            ],
            "itemtype": "attribute",
            "name": "MIE002",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 44,
            "description": "### Entity name must comply with the specification.\n\nAll entity names must comply with a specification: They must start by an A-Z or an underscore, and contain only letters, numbers, hyphens and underscores.",
            "example": [
                "\n    new Entity({ name: '1abc' })",
                "\n    new Entity({ name: '-abc' })",
                "\n    new Entity({ name: 'abc$' })"
            ],
            "itemtype": "attribute",
            "name": "MIE003",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 59,
            "description": "### Entity name must have between 2 a 64 characters.\n\nAll Metadatio entities must comply with these length requirements to be valid.",
            "example": [
                "\n    new Entity({ name: 'a' })",
                "\n    new Entity({ name: 'a..za..za..za..z' }) // More than 64 characters :)"
            ],
            "itemtype": "attribute",
            "name": "MIE004",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 72,
            "description": "### Entity fields must be instances of field.\n\nThis error occurs when you try to append a non-Field object as entity's field.",
            "example": [
                "\n    new Entity({ ... fields: [{...}] })",
                "\n    someEntity.addField({})"
            ],
            "itemtype": "attribute",
            "name": "MIE005",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 85,
            "description": "### A field already exist with name {{name}}, and 'overwrite' flag has not been set.\n\nWhen you append a field to an entity, an existence verification is done on the field name. The {{#crossLink Entity/addField:method}}addField{{/crossLink}} method contains an optional `overwrite` flag - that bypasses this verification process. If you don't set the flag, you will get this error.",
            "example": [
                "\n    const entity = new Entity({ ... fields: [new Field({ name: 'foo'})] })",
                "\n    entity.addField(new Field({ name: 'foo' }))"
            ],
            "itemtype": "attribute",
            "name": "MIE006",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 98,
            "description": "### Field name is required.\n\nThis error is thrown when you try to create an field, and the description object you used does not contain a `name` param.",
            "example": [
                "\n    new Field({})"
            ],
            "itemtype": "attribute",
            "name": "MIF001",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 109,
            "description": "### Field name must be a string.\n\nThis error is thrown when you set a non-string value as field name",
            "example": [
                "\n    new Field({ name: 123, ... })"
            ],
            "itemtype": "attribute",
            "name": "MIF002",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 120,
            "description": "### Field name must comply with the specification.\n\nAs entities, all field names must comply with the specification -i.e.   must start by an A-Z or an underscore, and contain only letters, numbers, hyphens and underscores.",
            "example": [
                "\n    new Field({ name: '1abc', ... })",
                "\n    new Field({ name: '-abc', ... })",
                "\n    new Field({ name: 'abc$', ... })"
            ],
            "itemtype": "attribute",
            "name": "MIF003",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 135,
            "description": "### Field name must have between 2 and 64 characters.\n\nAll field names lengths must be between defined bounds",
            "example": [
                "\n    new Field({ name: 'a', ... })",
                "\n    new Field({ name: 'a..za..za..za..z', ... }) // More than 64 characters :D"
            ],
            "itemtype": "attribute",
            "name": "MIF004",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 148,
            "description": "### Data type is not defined.\n\nThis exception is thrown when you define a field without a data type. Data typing your fields is essential for proper working, and thus not assigning it will result in this error.",
            "example": [
                "\n    new Field({ name: 'foo' })"
            ],
            "itemtype": "attribute",
            "name": "MIF005",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 159,
            "description": "### Data type is invalid.\n\nThis exception occurs when you set an invalid data type to a field. Data types can only be String, Number, Boolean, Date, and references to other entities",
            "example": [
                "\n    new Field({ name: 'foo', dataType: 'wrong' })"
            ],
            "itemtype": "attribute",
            "name": "MIF006",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 170,
            "description": "### Multiplicity is neither \\'one\\' nor \\'many\\'.\n\nYou will get this error if you setup a multiplicity for an entity that is neither 'one' nor 'many'. The {{#crossLink Field/multiplicity:property}}multiplicity{{/crossLink}} is optional, and by default is set to 'one'.",
            "example": [
                "\n    new Field({ ... multiplicity: 'wrong' })"
            ],
            "itemtype": "attribute",
            "name": "MIF007",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 181,
            "description": "### Validator name must be given, and be a string.\n\nWhen you attach validators to a field, you must define a *string* name for the validator - for logging purposes. When you associate a validator to a field without a name set - or with a name that is not a string -, you will get this error.",
            "example": [
                "\n    someField.addValidator(null, new Validator(...))",
                "\n    someField.addValidator(123, new Validator(...))"
            ],
            "itemtype": "attribute",
            "name": "MIV001",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 194,
            "description": "### Validators must be instances of \\'Validator\\'.\n\nEvery time you include a validator to a field, the value you set as validator is checked, to verify that it is an instance of {{#crossLink Validator}}Validator{{/crossLink}}. If that's not the case, this exception is thrown.",
            "example": [
                "\n    new Field({ ... validators: { 'pattern': {} } })",
                "\n    someField.addValidator('pattern', {});"
            ],
            "itemtype": "attribute",
            "name": "MIV002",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/metadata-integrity.exception.js",
            "line": 207,
            "description": "### A validator already exists with name {{name}} and 'overwrite' flag has not been set.\n\nWhen you include a validator to a field at runtime, a name verification is launched. If the validator name you set already exists, and you haven't set the `overwrite` flag, this error will occur.",
            "example": [
                "\n    const someField = new Field({ ... validators: { 'pattern': ... } } });",
                "\n    someField.addValidator('pattern': new Validator(...));"
            ],
            "itemtype": "attribute",
            "name": "MIV003",
            "class": "MetadataIntegrityException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "ReducerException",
            "module": "Core"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 22,
            "description": "### Base Injectable reducer needs an object to be configured\n\nIn order to create an {{#crossLink InjectableReducer}}Injectable reducer{{/crossLink}}, you need to provide an object defining the injectable",
            "example": [
                "\n    new InjectableReducer()"
            ],
            "itemtype": "attribute",
            "name": "RBI001",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 34,
            "description": "### Base Injectable reducer cannot be configured with a non-object\n\n{{#crossLink InjectableReducer}}Injectable reducers{{/crossLink}} must receive an instance of object",
            "example": [
                "\n    new InjectableReducer('wrong')"
            ],
            "itemtype": "attribute",
            "name": "RBI002",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 46,
            "description": "### You need to provide a UUID to create an injectable resource\n\nThere could be many reducers for the same purpose, so an **uuid** is needed to identify the target of our actions - all actions targeted to an {{#crossLink InjectableReducer}}injectable{{/crossLink}} **must** have an uuid present too.\n\nMetadatio uses {{#crossLink https://www.npmjs.com/package/shortid}}shortid{{/crossLink}} library for generating short ids.",
            "example": [
                "\n    new InjectableResource({});"
            ],
            "itemtype": "attribute",
            "name": "RBI003",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 60,
            "description": "### All injectable reducers must have an initial state\n\nYou need to provide an initial state for the injectable reducer upon creation",
            "example": [
                "\n    new InjectableResource({ uuid: 'xyz' });"
            ],
            "itemtype": "attribute",
            "name": "RBI004",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 72,
            "description": "### Every reducer needs a state object when reducing\n\nThis exception occurs upon reduction, whenever a reducer is called without a given state. If you've configured {{#crossLink http://redux.js.org/}}Redux{{/crossLink}} you shouldn't get this error - as it will be Redux the one who calls your reducer, and it will **always** send a `state`.",
            "itemtype": "attribute",
            "name": "RI003",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 81,
            "description": "### All states must be instances of Map\n\nAll native reducers within Metadatio work specifically with {{#crossLink https://www.npmjs.com/package/immutable}}Immutable{{/crossLink}} maps. If you try to set a state as a non-map instance, you will get this error.",
            "itemtype": "attribute",
            "name": "RI004",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 90,
            "description": "### Every reducer needs an action to reduce\n\nThis error occurs when a reducer is called without an action.",
            "itemtype": "attribute",
            "name": "RI005",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 99,
            "description": "### The action to reduce must be an object\n\nAll actions sent to the reducer must be objects",
            "itemtype": "attribute",
            "name": "RI006",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 108,
            "description": "### All actions must contain a 'type' attribute\n\nActions are defined via a `type` attribute. So this parameter is needed, as otherwise the action will not have any identity for the reducer.",
            "itemtype": "attribute",
            "name": "RI007",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 117,
            "description": "### Action type sent to reducer must be a string\n\nThe `type` attribute must be a String",
            "example": [
                "\n    reducer.reduce(state, { type: 123 })"
            ],
            "itemtype": "attribute",
            "name": "RI008",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 129,
            "description": "### All actions must contain a \\'uuid\\' attribute\n\nEvery action that arrives at an injectable reducer needs to be targeted with a uuid. As these reducers are not unique, otherwise your action could trigger an unwanted behavior.",
            "itemtype": "attribute",
            "name": "RI009",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 140,
            "description": "### Entity reducer needs an entity as input",
            "itemtype": "attribute",
            "name": "RIE001",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 149,
            "description": "### Entity reducer needs an instance of Entity",
            "itemtype": "attribute",
            "name": "RIE002",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 156,
            "description": "### Field reducer needs a field as input",
            "itemtype": "attribute",
            "name": "RIF001",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 163,
            "description": "### Field reducer needs an instance of Field",
            "itemtype": "attribute",
            "name": "RIF002",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 170,
            "description": "### Validator reducer needs a validator as input",
            "itemtype": "attribute",
            "name": "RIV001",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/reducer.exception.js",
            "line": 177,
            "description": "### Validator reducer needs an instance of Validator",
            "itemtype": "attribute",
            "name": "RIV002",
            "class": "ReducerException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/exceptions/store.exception.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "ValidatorException",
            "module": "Core"
        },
        {
            "file": "src/exceptions/validator.exception.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "ValidatorException",
            "module": "Core"
        },
        {
            "file": "src/exceptions/validator.exception.js",
            "line": 15,
            "description": "Constructs a new exception",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "e",
                    "description": ""
                }
            ],
            "class": "ValidatorException",
            "module": "Core",
            "submodule": "exceptions"
        },
        {
            "file": "src/metadata/data-types.metadata.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/element.metadata.js",
            "line": 1,
            "description": "Created by sm on 16/05/16.",
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 1,
            "description": "Created by sm on 06/05/16.",
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 61,
            "description": "Constructor for the class",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "props",
                    "description": "Properties for setting up the entity",
                    "type": "Entity"
                }
            ],
            "example": [
                "\n     const entity = new Entity({ name: 'my-entity', ... }) // Create your entity\n     .addField(...) // Add your fields"
            ],
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 73,
            "description": "Stores the name of the entity. This name must be unique across the same {{#crossLink \"Entity/namespace:property\"}}namespace{{/crossLink}}. It is the only required value upon construction.\n\nEntity name **must** be a String, with length from 2 to 64 characters. It can only contain `a-z, A-Z` characters, digits, hyphens and underscores. All names **must** start with an `a-z, A-Z` or underscore character.",
            "example": [
                "\n    new Entity({ name: 'foo-bar_123', ... }) // OK",
                "\n    new Entity({ name: '_foo-bar_123', ... }) // OK",
                "\n    new Entity({ name: '123-foo-bar', ... }) // KO",
                "\n    new Entity({ name: '-foo-bar_123', ... }) // KO",
                "\n    new Entity({ name: 'foo-bar_123$', ... }) // KO"
            ],
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 94,
            "description": "Description for the field",
            "itemtype": "property",
            "name": "description",
            "type": "{null|string}",
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 102,
            "itemtype": "property",
            "name": "namespace",
            "type": "{string}",
            "default": "'default'",
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 109,
            "description": "Optionnally, you can define a label for the entity. The label would represent a human-readable name for the entity. It's actually useful if you wish to provided translated names for the entity - as you can set a placeholder as label - but otherwise might be not that useful, and with the {{#crossLink \"Entity/name:property\"}}name{{/crossLink}} it may suffice.",
            "example": [
                "\n    new Entity({ label: 'Foo', ... }) // Plain label",
                "\n    new Entity({ label: 'entities.foo.label', ... }) // Translatable label"
            ],
            "itemtype": "property",
            "name": "label",
            "type": "{String}",
            "default": "null",
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 123,
            "description": "Parent entity. If an entity is an extension of some one more basic, you can link here the parent entity.\n\n\nIf your entity extends from another, **it will inherit parent's validation rules** too. The fields you extended on the child class will be validated with your defined validators, but those defined at parent's level will be validated with theirs. If you wish to override a field's validation for a parent within a child, simply include such field in the child's {{#crossLink \"Entity/fields:property\"}}fields{{/crossLink}} array.",
            "itemtype": "property",
            "name": "parent",
            "type": "{String|Entity}",
            "default": "null",
            "example": [
                "\n    const parent = new Entity({ name: 'parent-entity', ... });",
                "\n    const child = new Entity({ name: 'child-entity', parent: parent });"
            ],
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 139,
            "description": "Entity fields",
            "itemtype": "property",
            "name": "fields",
            "type": "{[Field]}",
            "example": [
                "\n    [new Field({ name: 'foo', ...})] // OK",
                "\n    [{ name: 'foo' }] // KO"
            ],
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 163,
            "description": "Adds a field to the entity",
            "itemtype": "method",
            "name": "addField",
            "params": [
                {
                    "name": "field",
                    "description": "The field to append",
                    "type": "Field"
                },
                {
                    "name": "overwrite",
                    "description": "Whether to overwrite the field with same name (if it exists)",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Entity"
            },
            "chainable": 1,
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/entity.metadata.js",
            "line": 181,
            "description": "Validates that an object parameters comply with corresponding field's validation rules.",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "item",
                    "description": "The object with the values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The validation result",
                "type": "Boolean"
            },
            "throws": {
                "description": "DataValidationException"
            },
            "class": "Entity",
            "module": "Core"
        },
        {
            "file": "src/metadata/field-types.metadata.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 65,
            "description": "Constructor for the class",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "props",
                    "description": "An object with the properties of the field",
                    "type": "Object"
                }
            ],
            "throws": {
                "description": "If the field's metadata is corrupt in any way, an exception is thrown.",
                "type": "MetadataIntegrityException"
            },
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 83,
            "description": "Determines whether the value defined for a field is valid.",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "The",
                    "description": "validators to match against.",
                    "type": "validators=this.validators"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 129,
            "description": "The **name** for the field. A field's name **must** be unique within each entity.",
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 139,
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "type": "{string}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 151,
            "description": "Label for the field. This defines the human-readable name for the field.",
            "itemtype": "property",
            "name": "label",
            "type": "{string}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 161,
            "params": [
                {
                    "name": "label",
                    "description": ""
                }
            ],
            "type": "{string}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 169,
            "description": "Short label for the field. This defines the short version of the human-readable name for the field.",
            "itemtype": "property",
            "name": "shortLabel",
            "type": "{string}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 179,
            "params": [
                {
                    "name": "shortlabel",
                    "description": ""
                }
            ],
            "type": "{string}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 187,
            "description": "Description for the field",
            "itemtype": "property",
            "name": "description",
            "type": "{string}",
            "default": "null",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 198,
            "params": [
                {
                    "name": "description",
                    "description": ""
                }
            ],
            "type": "{string}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 206,
            "description": "Define the data type of the element.\n\nBasic data types are primitive types to define basic data.",
            "itemtype": "property",
            "name": "dataType",
            "type": "{string|Entity}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 218,
            "params": [
                {
                    "name": "dataType",
                    "description": ""
                }
            ],
            "type": "{string|Entity}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 229,
            "description": "Define the multiplicity for the element",
            "itemtype": "property",
            "name": "multiplicity",
            "type": "{string}",
            "default": "'one'",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 240,
            "params": [
                {
                    "name": "multiplicity",
                    "description": ""
                }
            ],
            "type": "{string}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 250,
            "description": "Define the validators for the field",
            "itemtype": "property",
            "name": "validators",
            "type": "{Validator*}",
            "default": "{}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 261,
            "params": [
                {
                    "name": "validators",
                    "description": ""
                }
            ],
            "type": "{Validator*}",
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/field.metadata.js",
            "line": 276,
            "description": "Adds a new validator to the field.",
            "itemtype": "method",
            "name": "addValidator",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the validator",
                    "type": "String"
                },
                {
                    "name": "validator",
                    "description": "The new validator to include",
                    "type": "Validator"
                },
                {
                    "name": "overwrite",
                    "description": "Whether to overwrite the validator name, if it exists.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Field"
            },
            "chainable": 1,
            "class": "Field",
            "module": "Core"
        },
        {
            "file": "src/metadata/index.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "Validator",
            "module": "Core"
        },
        {
            "file": "src/metadata/metadatio.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "Validator",
            "module": "Core"
        },
        {
            "file": "src/metadata/util.metadata.js",
            "line": 1,
            "description": "Created by sm on 07/05/16.",
            "class": "Validator",
            "module": "Core"
        },
        {
            "file": "src/metadata/validator-types.metadata.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "Validator",
            "module": "Core"
        },
        {
            "file": "src/metadata/validator.metadata.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "Validator",
            "module": "Core"
        },
        {
            "file": "src/metadata/validator.metadata.js",
            "line": 22,
            "description": "Creates a new validator instance, for validating using a certain method, with the validator match given",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "type",
                    "description": "Define the type of validation to use. Type must be one TODO: Link ValidatorTypes defined.",
                    "type": "String"
                },
                {
                    "name": "validator",
                    "description": "The validator to match values against",
                    "type": "String|RegExp|Object|function"
                }
            ],
            "class": "Validator",
            "module": "Core"
        },
        {
            "file": "src/metadata/validator.metadata.js",
            "line": 80,
            "description": "Used to validate a value against the validator defined.",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "Value to validate",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Validator",
            "module": "Core"
        },
        {
            "file": "src/reducers/injectable/entity.reducer.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "FieldReducer",
            "module": "Core"
        },
        {
            "file": "src/reducers/injectable/field.reducer.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "FieldReducer",
            "module": "Core"
        },
        {
            "file": "src/reducers/injectable/field.reducer.js",
            "line": 25,
            "description": "Contains the initial state for any Field. Upon construction, this property is filled with the Field data for further control.\n\nThe basic structure of the `initialState` is:\n\n```\n{\n  uuid: 'Unique ID of the validator',\n  valid: true, // Whether the validation succeeded\n  validator: Field // The actual validator to match against\n}\n```",
            "itemtype": "property",
            "name": "initialState",
            "static": 1,
            "type": "{Map}",
            "class": "FieldReducer",
            "module": "Reducers",
            "submodule": "injectable"
        },
        {
            "file": "src/reducers/injectable/field.reducer.js",
            "line": 48,
            "description": "Constructor for the validator reducer",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "field",
                    "description": "The field to associate with the reducer",
                    "type": "Field"
                }
            ],
            "class": "FieldReducer",
            "module": "Reducers",
            "submodule": "injectable"
        },
        {
            "file": "src/reducers/injectable/field.reducer.js",
            "line": 72,
            "description": "Combines the field information reducer - that handles the data within this reducer - and the inner validation and history reducers.",
            "itemtype": "method",
            "name": "combine",
            "return": {
                "description": "",
                "type": "Reducer"
            },
            "class": "FieldReducer",
            "module": "Reducers",
            "submodule": "injectable"
        },
        {
            "file": "src/reducers/injectable/field.reducer.js",
            "line": 92,
            "description": "Performs a reduction on a validator state, upon a validation change action.",
            "itemtype": "method",
            "name": "reduce",
            "params": [
                {
                    "name": "state",
                    "description": ""
                },
                {
                    "name": "action",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Map"
            },
            "class": "FieldReducer",
            "module": "Reducers",
            "submodule": "injectable"
        },
        {
            "file": "src/reducers/injectable/index.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "ValidatorReducer",
            "module": "Reducers"
        },
        {
            "file": "src/reducers/injectable/injectable.reducer.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "ValidatorReducer",
            "module": "Reducers"
        },
        {
            "file": "src/reducers/injectable/raw-map.reducer.js",
            "line": 1,
            "description": "Created by sm on 20/05/16.",
            "class": "ValidatorReducer",
            "module": "Reducers"
        },
        {
            "file": "src/reducers/injectable/validator.reducer.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "ValidatorReducer",
            "module": "Reducers"
        },
        {
            "file": "src/reducers/injectable/validator.reducer.js",
            "line": 23,
            "description": "Contains the initial state for any Validator. Upon construction, this property is filled with the Validator data for further control.\n\nThe basic structure of the `initialState` is:\n\n```\n{\n  uuid: 'Unique ID of the validator',\n  valid: true, // Whether the validation succeeded\n}\n```",
            "itemtype": "property",
            "name": "initialState",
            "static": 1,
            "type": "{immutable.Map}",
            "class": "ValidatorReducer",
            "module": "Reducers",
            "submodule": "injectable"
        },
        {
            "file": "src/reducers/injectable/validator.reducer.js",
            "line": 44,
            "description": "Constructor for the validator reducer",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "validator",
                    "description": "The validator that will perform changes on this state",
                    "type": "Validator"
                },
                {
                    "name": "valid",
                    "description": "If you want to provide an initial validity for the validator",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "ValidatorReducer",
            "module": "Reducers",
            "submodule": "injectable"
        },
        {
            "file": "src/reducers/injectable/validator.reducer.js",
            "line": 64,
            "description": "Performs a reduction on a validator state, upon a validation change action.",
            "itemtype": "method",
            "name": "reduce",
            "params": [
                {
                    "name": "state",
                    "description": ""
                },
                {
                    "name": "action",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "immutable.Map"
            },
            "class": "ValidatorReducer",
            "module": "Reducers",
            "submodule": "injectable"
        },
        {
            "file": "src/reducers/index.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "Store",
            "module": "Reducers"
        },
        {
            "file": "src/reducers/metadatio.reducer.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "Store",
            "module": "Reducers"
        },
        {
            "file": "src/index.js",
            "line": 1,
            "description": "Created by sm on 01/05/16.",
            "class": "Store",
            "module": "Reducers"
        },
        {
            "file": "src/store.js",
            "line": 1,
            "description": "Created by sm on 14/05/16.",
            "class": "Store",
            "module": "Reducers"
        },
        {
            "file": "src/store.js",
            "line": 21,
            "description": "Determines whether the store has been configured. Upon configuration, the store is created and engaged with the defined reducers. But until this phase passes the store would not be set, and thus it's usage will result in errors. This flag is useful to avoid unexpected errors when using the store.",
            "itemtype": "property",
            "name": "configured",
            "type": "{boolean}",
            "class": "Store",
            "module": "Core"
        },
        {
            "file": "src/store.js",
            "line": 31,
            "description": "Contains all the element-specific reducers (relative to each element of your app) that are injected to the store asynchronously once you declare your elements - i.e. entities, fields and validators.",
            "itemtype": "property",
            "name": "asyncReducers",
            "type": "{Object}",
            "class": "Store",
            "module": "Core"
        },
        {
            "file": "src/store.js",
            "line": 40,
            "description": "Configures the store. It receives the initial state for the store, and it engages the reducers",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "initialState",
                    "description": "The initial state for the store",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Store",
            "module": "Core"
        },
        {
            "file": "src/store.js",
            "line": 56,
            "description": "Injects a new reducer within the store. This is called whenever you add a new element to the metadata object, as every element within Metadatio has its own, specific reducer for performing and monitoring their actions. By adding such reducer via this method is directly engaged through the store, and the reducers are recombined.",
            "itemtype": "method",
            "name": "injectAsync",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the reducer to inject",
                    "type": "String"
                },
                {
                    "name": "reducer",
                    "description": "The reducer to inject",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Store"
            },
            "class": "Store",
            "module": "Core"
        },
        {
            "file": "src/store.js",
            "line": 78,
            "description": "Dispatches an action through the store. This is just a gateway to call the Redux action dispatcher.",
            "itemtype": "method",
            "name": "dispatch",
            "params": [
                {
                    "name": "action",
                    "description": "The object that describes what happened",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Store",
            "module": "Core"
        },
        {
            "file": "src/store.js",
            "line": 95,
            "description": "Returns the current state",
            "itemtype": "method",
            "name": "getState",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Store",
            "module": "Core"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/metadata/entity.metadata.js:163"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/metadata/entity.metadata.js:181"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/metadata/field.metadata.js:83"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/metadata/field.metadata.js:276"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/metadata/validator.metadata.js:80"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/reducers/injectable/field.reducer.js:72"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/reducers/injectable/field.reducer.js:92"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/reducers/injectable/validator.reducer.js:64"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/store.js:56"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/store.js:95"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/actions/entity.actions.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/actions/field.actions.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 17/05/16.",
            "line": " src/actions/index.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/actions/metadatio.actions.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/actions/validator.actions.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/exceptions/data-validation.exception.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/exceptions/index.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/exceptions/metadata-integrity.exception.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/exceptions/reducer.exception.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/exceptions/store.exception.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/exceptions/validator.exception.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/metadata/data-types.metadata.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 16/05/16.",
            "line": " src/metadata/element.metadata.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 06/05/16.",
            "line": " src/metadata/entity.metadata.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/metadata/field-types.metadata.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/metadata/field.metadata.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/metadata/field.metadata.js:139"
        },
        {
            "message": "Missing item type",
            "line": " src/metadata/field.metadata.js:161"
        },
        {
            "message": "Missing item type",
            "line": " src/metadata/field.metadata.js:179"
        },
        {
            "message": "Missing item type",
            "line": " src/metadata/field.metadata.js:198"
        },
        {
            "message": "Missing item type",
            "line": " src/metadata/field.metadata.js:218"
        },
        {
            "message": "Missing item type",
            "line": " src/metadata/field.metadata.js:240"
        },
        {
            "message": "Missing item type",
            "line": " src/metadata/field.metadata.js:261"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/metadata/index.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/metadata/metadatio.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 07/05/16.",
            "line": " src/metadata/util.metadata.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/metadata/validator-types.metadata.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/metadata/validator.metadata.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/reducers/injectable/entity.reducer.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/reducers/injectable/field.reducer.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/reducers/injectable/index.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/reducers/injectable/injectable.reducer.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 20/05/16.",
            "line": " src/reducers/injectable/raw-map.reducer.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/reducers/injectable/validator.reducer.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/reducers/index.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/reducers/metadatio.reducer.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 01/05/16.",
            "line": " src/index.js:1"
        },
        {
            "message": "Missing item type\nCreated by sm on 14/05/16.",
            "line": " src/store.js:1"
        }
    ]
}